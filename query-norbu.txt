*********android_retention.csv*****************
WITH 
first_open AS (
    SELECT DATE(TIMESTAMP_MICROS(event_timestamp)) AS first_open_dt, 
           user_pseudo_id, 
FROM `norbu-app-6b798.analytics_201683422.events_*`
     WHERE _TABLE_SUFFIX BETWEEN "20220304" AND "20220404"
       AND device.operating_system = 'Android'
       AND event_name = "first_open" 
),
active as (
    SELECT DISTINCT DATE(TIMESTAMP_MICROS(event_timestamp)) AS active_dt, 
                    user_pseudo_id,
      FROM `norbu-app-6b798.analytics_201683422.events_*`
     WHERE _TABLE_SUFFIX BETWEEN "20220304" AND "20220404"
       AND device.operating_system = 'Android'
       AND event_name <> "app_remove" 
), cohort_size AS (
    SELECT first_open_dt, 
           COUNT(DISTINCT first_open.user_pseudo_id) AS users
      FROM first_open
  GROUP BY 1
)
    SELECT first_open.first_open_dt AS first_open_dt, 
           DATE_DIFF(active.active_dt, first_open.first_open_dt, DAY) AS days, 
           cohort_size.users AS cohort_users, 
           COUNT(DISTINCT active.user_pseudo_id) as retained,
           SAFE_DIVIDE(COUNT(DISTINCT active.user_pseudo_id), cohort_size.users) AS retention_rate
      FROM first_open
 LEFT JOIN cohort_size
        ON first_open.first_open_dt = cohort_size.first_open_dt
 LEFT JOIN active
        ON first_open.user_pseudo_id = active.user_pseudo_id
  GROUP BY 1,2,3 HAVING days IN (1,3,7)
  ORDER BY 1,2 ASC; 

*********************************************************************

****************ios_retention*****************************************
WITH 
first_open AS (
    SELECT DATE(TIMESTAMP_MICROS(event_timestamp)) AS first_open_dt, 
           user_pseudo_id, 
           FROM `norbu-app-6b798.analytics_201683422.events_*`
     WHERE _TABLE_SUFFIX BETWEEN "20220304" AND "20220404"
       AND device.operating_system = 'iOS'
       AND event_name = "first_open" 
),
active as (
    SELECT DISTINCT DATE(TIMESTAMP_MICROS(event_timestamp)) AS active_dt, 
                    user_pseudo_id,
      FROM `norbu-app-6b798.analytics_201683422.events_*`
     WHERE _TABLE_SUFFIX BETWEEN "20220304" AND "20220404"
       AND device.operating_system = 'iOS'
       AND event_name <> "app_remove" 
), cohort_size AS (
    SELECT first_open_dt, 
           COUNT(DISTINCT first_open.user_pseudo_id) AS users
      FROM first_open
  GROUP BY 1
)
    SELECT first_open.first_open_dt AS first_open_dt, 
           DATE_DIFF(active.active_dt, first_open.first_open_dt, DAY) AS days, 
           cohort_size.users AS cohort_users, 
           COUNT(DISTINCT active.user_pseudo_id) as retained,
           SAFE_DIVIDE(COUNT(DISTINCT active.user_pseudo_id), cohort_size.users) AS retention_rate
      FROM first_open
 LEFT JOIN cohort_size
        ON first_open.first_open_dt = cohort_size.first_open_dt
 LEFT JOIN active
        ON first_open.user_pseudo_id = active.user_pseudo_id
  GROUP BY 1,2,3 HAVING days IN (1,3,7)
  ORDER BY 1,2 ASC; 

*******************************************************************************************

**************************event_with_details**************************************************
SELECT 
     user_pseudo_id AS user_id, 
     event_name, 
     
     --pull keys and values from the unpacked event_params nested table
        event_params.KEY AS parameter_name,
        --pull values for the keys
            event_params.VALUE.int_value AS int_value, 
            event_params.VALUE.string_value AS string_value,
            event_params.VALUE.float_value AS float_value,
            event_params.VALUE.double_value AS double_value,
            DATE_TRUNC(TIMESTAMP_MICROS(event_timestamp), SECOND) AS event_ts,
     DATE_TRUNC(TIMESTAMP_MICROS(user_first_touch_timestamp), SECOND) AS event_first_touch_ts,
     user_ltv.revenue as revenue,
     user_ltv.currency as currency,
     geo.continent as continent,
     geo.country as country,
     geo.region as region,
     geo.city as city,
     traffic_source.name as source_name,
     traffic_source.medium as source_medium,
     traffic_source.source as source,
     platform,
 
FROM 
    `norbu-app-6b798.analytics_201683422.events_*`,
    --un-nest event_params so we can pull values in our select statement
        UNNEST(event_params) AS event_params
WHERE
           --dates to pull from. delete this condition to get all rows
        _TABLE_SUFFIX BETWEEN "20220304" AND "20220404"
ORDER BY 
    --order by user id and event_ts to see each event block seperately
    user_pseudo_id ASC, event_timestamp ASC LIMIT 200000

****************************************************************************************

********************premium_app_purchase_users****************************************************

SELECT
     user_pseudo_id AS user_id,
     event_name,
     --pull keys and values from the unpacked event_params nested table
        event_params.KEY AS parameter_name,
        --pull values for the keys
            event_params.VALUE.int_value AS int_value,
            event_params.VALUE.string_value AS string_value,
            event_params.VALUE.float_value AS float_value,
            event_params.VALUE.double_value AS double_value,
            DATE_TRUNC(TIMESTAMP_MICROS(event_timestamp), SECOND) AS event_ts,
     DATE_TRUNC(TIMESTAMP_MICROS(user_first_touch_timestamp), SECOND) AS event_first_touch_ts,
     user_ltv.revenue as revenue,
     user_ltv.currency as currency,
     geo.continent as continent,
     geo.country as country,
     geo.region as region,
     geo.city as city,
     traffic_source.name as source_name,
     traffic_source.medium as source_medium,
     traffic_source.source as source,
     platform,
FROM
    `norbu-app-6b798.analytics_201683422.events_*`,
    --un-nest event_params so we can pull values in our select statement
        UNNEST(event_params) AS event_params
WHERE
     user_pseudo_id
in
(SELECT user_pseudo_id FROM `norbu-app-6b798.analytics_201683422.events_*` 
where _TABLE_SUFFIX BETWEEN "20220304" AND "20220404"
and event_name in('in_app_purchase','scr_premium'))
order by user_pseudo_id,event_ts desc

**********************************************************************************

*********************value_in_usd***************************************************

SELECT
     user_pseudo_id AS user_id,
     event_name,
     
            event_value_in_usd,
            event_bundle_sequence_id,
            DATE_TRUNC(TIMESTAMP_MICROS(event_timestamp), SECOND) AS event_ts,
     DATE_TRUNC(TIMESTAMP_MICROS(user_first_touch_timestamp), SECOND) AS event_first_touch_ts,
     
FROM
    `norbu-app-6b798.analytics_201683422.events_*`
WHERE
     user_pseudo_id
in
(SELECT user_pseudo_id FROM `norbu-app-6b798.analytics_201683422.events_*` 
where _TABLE_SUFFIX BETWEEN "20220304" AND "20220404"
and event_name in('in_app_purchase','scr_premium'))
order by event_value_in_usd desc

******************************************************************************************

*****************************session_details********************************************

SELECT user_pseudo_id as user_id,
       DATE_TRUNC(TIMESTAMP_MICROS(event_timestamp), SECOND) AS event_ts,
       SUM(is_new_session) OVER (ORDER BY user_pseudo_id, event_timestamp) AS global_session_id,
       SUM(is_new_session) OVER (PARTITION BY user_pseudo_id ORDER BY event_timestamp) AS user_session_id,
       FROM (
       SELECT *,
              CASE WHEN event_timestamp - last_event >= (30*60*1000*1000) 
                     OR last_event IS NULL 
                   THEN 1 ELSE 0 END AS is_new_session
              FROM (
              SELECT user_pseudo_id,
                     event_timestamp,
                     LAG(event_timestamp,1) OVER (PARTITION BY user_pseudo_id ORDER BY event_timestamp) AS last_event
                FROM `norbu-app-6b798.analytics_201683422.events_*`
                where _TABLE_SUFFIX BETWEEN "20220304" AND "20220404"
                )
       )
        order by event_timestamp      

*************************************************************************************************




